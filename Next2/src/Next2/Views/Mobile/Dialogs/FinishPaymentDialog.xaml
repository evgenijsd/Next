<?xml version="1.0" encoding="utf-8" ?>
<rg:PopupPage
    xmlns="http://xamarin.com/schemas/2014/forms"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:dialogs="clr-namespace:Next2.ViewModels.Dialogs"
    xmlns:enum="clr-namespace:Next2.Enums"
    xmlns:buttons="clr-namespace:Next2.Controls.Buttons"
    xmlns:local="clr-namespace:Next2"
    xmlns:pcView="clr-namespace:Xamarin.Forms.PancakeView;assembly=Xamarin.Forms.PancakeView"
    xmlns:rg="clr-namespace:Rg.Plugins.Popup.Pages;assembly=Rg.Plugins.Popup"
    xmlns:xct="http://xamarin.com/schemas/2020/toolkit"
    x:Class="Next2.Views.Mobile.Dialogs.FinishPaymentDialog"
    x:DataType="dialogs:FinishPaymentDialogViewModel">

    <rg:PopupPage.Resources>

        <Style x:Key="SeparatorStyle" TargetType="BoxView">

            <Setter Property="BackgroundColor" Value="{DynamicResource TextAndBackgroundColor_i2}" />
            <Setter Property="HeightRequest" Value="{OnPlatform Android=1.5, iOS=1}" />
            <Setter Property="HorizontalOptions" Value="FillAndExpand" />
            <Setter Property="VerticalOptions" Value="End" />

        </Style>

        <Style x:Key="ButtonStyle" TargetType="buttons:BorderButton">

            <Setter Property="WidthRequest" Value="126" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="HeightRequest" Value="38" />
            <Setter Property="BackgroundColor" Value="{DynamicResource TextAndBackgroundColor_i4}" />
            <Setter Property="CornerRadius" Value="4" />
            <Setter Property="FontFamily" Value="Barlow-SemiBold" />
            <Setter Property="FontSize" Value="{DynamicResource TSize_i7}" />

        </Style>

        <Style x:Key="LabelStyle" TargetType="Label">

            <Setter Property="FontFamily" Value="Barlow-SemiBold" />
            <Setter Property="FontSize" Value="{DynamicResource TSize_i7}" />
            <Setter Property="TextColor" Value="{DynamicResource TextAndBackgroundColor_i1}" />
            <Setter Property="HorizontalTextAlignment" Value="Start" />
            <Setter Property="VerticalTextAlignment" Value="Center" />

        </Style>

    </rg:PopupPage.Resources>

    <pcView:PancakeView
        Margin="18"
        VerticalOptions="CenterAndExpand"
        HorizontalOptions="CenterAndExpand"
        HeightRequest="785"
        WidthRequest="492"
        BackgroundColor="{DynamicResource TextAndBackgroundColor_i4}"
        Border="{pcView:BorderMarkup Color={StaticResource TextAndBackgroundColor_i2}, Thickness=3}"
        CornerRadius="6">

        <Grid RowDefinitions="0.1*, 0.27*, 0.43*, 0.2*">

            <Frame BackgroundColor="{DynamicResource TextAndBackgroundColor_i3}">

                <Label
                    Grid.Row="0"
                    Margin="18, 0, 0, 0"
                    VerticalOptions="Center"
                    HorizontalOptions="Start"
                    FontFamily="Barlow-SemiBold"
                    FontSize="{DynamicResource TSize_i5}"
                    Text="{xct:Translate PaymentComplete}"
                    TextColor="{DynamicResource TextAndBackgroundColor_i1}" />

            </Frame>

            <BoxView
                Grid.Row="0"
                Style="{DynamicResource SeparatorStyle}"
                BackgroundColor="{DynamicResource TextAndBackgroundColor_i6}" />

            <StackLayout
                Grid.Row="1"
                Margin="18, 0, 0, 0"
                VerticalOptions="Center"
                HorizontalOptions="Start"
                Orientation="Vertical"
                Spacing="14">

                <Label
                    Style="{DynamicResource LabelStyle}"
                    FontFamily="Barlow-Medium"
                    Text="{xct:Translate Subtotal}" />

                <Label
                    Style="{DynamicResource LabelStyle}"
                    FontFamily="Barlow-Medium"
                    Text="{xct:Translate Coupon}">

                    <Label.Triggers>
                        <DataTrigger TargetType="Label" Binding="{Binding BonusType}" Value="{x:Static enum:EBonusType.Discount}">

                            <Setter Property="Text" Value="{xct:Translate Discount}" />

                        </DataTrigger>

                        <DataTrigger TargetType="Label" Binding="{Binding BonusType}" Value="{x:Static enum:EBonusType.None}">

                            <Setter Property="IsVisible" Value="False" />

                        </DataTrigger>

                    </Label.Triggers>

                </Label>

                <Label
                    Style="{DynamicResource LabelStyle}"
                    FontFamily="Barlow-Medium"
                    IsVisible="{Binding Order.PriceTax, Converter={StaticResource decimalToBoolConverter}}"
                    Text="{xct:Translate Tax}" />

                <Label
                    Style="{DynamicResource LabelStyle}"
                    FontFamily="Barlow-Medium"
                    IsVisible="{Binding Order.Tip, Converter={StaticResource decimalToBoolConverter}}"
                    Text="{xct:Translate Tip}" />

            </StackLayout>

            <StackLayout
                Grid.Row="1"
                Margin="0, 0, 18, 0"
                VerticalOptions="Center"
                HorizontalOptions="End"
                Orientation="Vertical"
                Spacing="14">

                <Label
                    Style="{DynamicResource LabelStyle}"
                    HorizontalOptions="EndAndExpand">

                    <Label.FormattedText>
                        <FormattedString>

                            <Span Text="{xct:Translate CurrencySign}" />
                            <Span Text=" " />
                            <Span Text="{Binding Order.Subtotal, StringFormat={x:Static local:Constants+Formats.PRICE_FORMAT}}" />

                        </FormattedString>
                    </Label.FormattedText>

                </Label>

                <Label
                    Style="{DynamicResource LabelStyle}"
                    HorizontalOptions="EndAndExpand"
                    IsVisible="{Binding Order.Bonus, Converter={xct:IsNotNullOrEmptyConverter}}">

                    <Label.FormattedText>
                        <FormattedString>

                            <Span Text="- " />
                            <Span Text="{Binding Order.Bonus.DiscountPercentage}" />
                            <Span Text="% " />
                            <Span Text="{xct:Translate Off}" />

                        </FormattedString>
                    </Label.FormattedText>

                </Label>

                <Label
                    Style="{DynamicResource LabelStyle}"
                    HorizontalOptions="EndAndExpand"
                    IsVisible="{Binding Order.PriceTax, Converter={StaticResource decimalToBoolConverter}}">

                    <Label.FormattedText>
                        <FormattedString>

                            <Span Text="+ " />
                            <Span Text="{xct:Translate CurrencySign}" />
                            <Span Text=" " />
                            <Span Text="{Binding Order.PriceTax, StringFormat={x:Static local:Constants+Formats.PRICE_FORMAT}}" />

                        </FormattedString>
                    </Label.FormattedText>

                </Label>

                <Label
                    Style="{DynamicResource LabelStyle}"
                    HorizontalOptions="EndAndExpand"
                    IsVisible="{Binding Order.Tip, Converter={StaticResource decimalToBoolConverter}}"
                    Text="{Binding TipValue}" />

            </StackLayout>

            <BoxView
                Grid.Row="1"
                Style="{DynamicResource SeparatorStyle}"
                Margin="18, 0" />

            <StackLayout
                Grid.Row="2"
                Margin="18, 14, 0, 0"
                HorizontalOptions="Start"
                Orientation="Vertical"
                Spacing="14">

                <Label
                    Style="{DynamicResource LabelStyle}"
                    FontFamily="Barlow-Medium"
                    IsVisible="{Binding Order.Cash, Converter={StaticResource decimalToBoolConverter}}"
                    Text="{xct:Translate Cash}" />

                <Label
                    Style="{DynamicResource LabelStyle}"
                    FontFamily="Barlow-Medium"
                    IsVisible="{Binding Order.GiftCard, Converter={StaticResource decimalToBoolConverter}}"
                    Text="{xct:Translate GiftCards}" />

                <Label
                    Style="{DynamicResource LabelStyle}"
                    FontFamily="Barlow-Medium"
                    IsVisible="{Binding Order.Change, Converter={StaticResource decimalToBoolConverter}}"
                    Text="{xct:Translate Change}" />

                <Label
                    Style="{DynamicResource LabelStyle}"
                    FontFamily="Barlow-Regular"
                    FontSize="{DynamicResource TSize_i6}"
                    Text="{xct:Translate Total}" />

            </StackLayout>

            <StackLayout
                Grid.Row="2"
                Margin="0, 14, 18, 0"
                HorizontalOptions="End"
                Orientation="Vertical"
                Spacing="14">

                <Label
                    Style="{DynamicResource LabelStyle}"
                    HorizontalOptions="EndAndExpand"
                    IsVisible="{Binding Order.Cash, Converter={StaticResource decimalToBoolConverter}}">

                    <Label.FormattedText>
                        <FormattedString>

                            <Span Text="{xct:Translate CurrencySign}" />
                            <Span Text="{Binding Order.Cash, StringFormat={x:Static local:Constants+Formats.PRICE_FORMAT}}" />

                        </FormattedString>
                    </Label.FormattedText>

                </Label>

                <Label
                    Style="{DynamicResource LabelStyle}"
                    HorizontalOptions="EndAndExpand"
                    IsVisible="{Binding Order.GiftCard, Converter={StaticResource decimalToBoolConverter}}">

                    <Label.FormattedText>
                        <FormattedString>

                            <Span Text="- " />
                            <Span Text="{xct:Translate CurrencySign}" />
                            <Span Text="{Binding Order.GiftCard, StringFormat={x:Static local:Constants+Formats.PRICE_FORMAT}}" />

                        </FormattedString>
                    </Label.FormattedText>

                </Label>

                <Label
                    Style="{DynamicResource LabelStyle}"
                    HorizontalOptions="EndAndExpand"
                    IsVisible="{Binding Order.Change, Converter={StaticResource decimalToBoolConverter}}">

                    <Label.FormattedText>
                        <FormattedString>

                            <Span Text="{xct:Translate CurrencySign}" />
                            <Span Text="{Binding Order.Change, StringFormat={x:Static local:Constants+Formats.PRICE_FORMAT}}" />

                        </FormattedString>
                    </Label.FormattedText>

                </Label>

                <Label
                    Style="{DynamicResource LabelStyle}"
                    HorizontalOptions="EndAndExpand"
                    FontFamily="Barlow-Regular"
                    FontSize="{DynamicResource TSize_i6}">

                    <Label.FormattedText>
                        <FormattedString>

                            <Span Text="{xct:Translate CurrencySign}" />
                            <Span Text=" " />
                            <Span Text="{Binding Order.Total, StringFormat={x:Static local:Constants+Formats.PRICE_FORMAT}}" />

                        </FormattedString>
                    </Label.FormattedText>

                </Label>

            </StackLayout>

            <BoxView
                Grid.Row="2"
                Style="{DynamicResource SeparatorStyle}" />

            <StackLayout
                Grid.Row="3"
                Margin="18, 16"
                Spacing="12">

                <StackLayout
                    Orientation="Horizontal"
                    Spacing="12">

                    <buttons:BorderButton
                        Style="{DynamicResource ButtonStyle}"
                        Text="{xct:Translate Email}"
                        BorderColor="{DynamicResource IndicationColor_i5}"
                        xct:TouchEffect.Command="{Binding FinishPaymentCommand}"
                        xct:TouchEffect.CommandParameter="{x:Static enum:EPaymentReceiptOptions.SendByEmail}" />

                    <buttons:BorderButton
                        Style="{DynamicResource ButtonStyle}"
                        BorderColor="{DynamicResource IndicationColor_i7}"
                        Text="{xct:Translate Text}"
                        xct:TouchEffect.Command="{Binding FinishPaymentCommand}"
                        xct:TouchEffect.CommandParameter="{x:Static enum:EPaymentReceiptOptions.SendBySMS}" />

                    <buttons:BorderButton
                        Style="{DynamicResource ButtonStyle}"
                        BorderColor="{DynamicResource AppColor_i1}"
                        Text="{xct:Translate Print}"
                        xct:TouchEffect.Command="{Binding FinishPaymentCommand}"
                        xct:TouchEffect.CommandParameter="{x:Static enum:EPaymentReceiptOptions.PrintReceipt}" />

                </StackLayout>

                <buttons:BorderButton
                    Style="{DynamicResource ButtonStyle}"
                    VerticalOptions="EndAndExpand"
                    Text="{xct:Translate NoReceipt}"
                    TextColor="{DynamicResource TextAndBackgroundColor_i3}"
                    BackgroundColor="{DynamicResource IndicationColor_i1}"
                    xct:TouchEffect.Command="{Binding FinishPaymentCommand}"
                    xct:TouchEffect.CommandParameter="{x:Static enum:EPaymentReceiptOptions.WithoutReceipt}" />

            </StackLayout>

        </Grid>

    </pcView:PancakeView>

</rg:PopupPage>